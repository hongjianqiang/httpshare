/******/ (function(modules) { // webpackBootstrap
/******/ 	// The module cache
/******/ 	var installedModules = {};
/******/
/******/ 	// The require function
/******/ 	function __webpack_require__(moduleId) {
/******/
/******/ 		// Check if module is in cache
/******/ 		if(installedModules[moduleId]) {
/******/ 			return installedModules[moduleId].exports;
/******/ 		}
/******/ 		// Create a new module (and put it into the cache)
/******/ 		var module = installedModules[moduleId] = {
/******/ 			i: moduleId,
/******/ 			l: false,
/******/ 			exports: {}
/******/ 		};
/******/
/******/ 		// Execute the module function
/******/ 		modules[moduleId].call(module.exports, module, module.exports, __webpack_require__);
/******/
/******/ 		// Flag the module as loaded
/******/ 		module.l = true;
/******/
/******/ 		// Return the exports of the module
/******/ 		return module.exports;
/******/ 	}
/******/
/******/
/******/ 	// expose the modules object (__webpack_modules__)
/******/ 	__webpack_require__.m = modules;
/******/
/******/ 	// expose the module cache
/******/ 	__webpack_require__.c = installedModules;
/******/
/******/ 	// define getter function for harmony exports
/******/ 	__webpack_require__.d = function(exports, name, getter) {
/******/ 		if(!__webpack_require__.o(exports, name)) {
/******/ 			Object.defineProperty(exports, name, { enumerable: true, get: getter });
/******/ 		}
/******/ 	};
/******/
/******/ 	// define __esModule on exports
/******/ 	__webpack_require__.r = function(exports) {
/******/ 		if(typeof Symbol !== 'undefined' && Symbol.toStringTag) {
/******/ 			Object.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });
/******/ 		}
/******/ 		Object.defineProperty(exports, '__esModule', { value: true });
/******/ 	};
/******/
/******/ 	// create a fake namespace object
/******/ 	// mode & 1: value is a module id, require it
/******/ 	// mode & 2: merge all properties of value into the ns
/******/ 	// mode & 4: return value when already ns object
/******/ 	// mode & 8|1: behave like require
/******/ 	__webpack_require__.t = function(value, mode) {
/******/ 		if(mode & 1) value = __webpack_require__(value);
/******/ 		if(mode & 8) return value;
/******/ 		if((mode & 4) && typeof value === 'object' && value && value.__esModule) return value;
/******/ 		var ns = Object.create(null);
/******/ 		__webpack_require__.r(ns);
/******/ 		Object.defineProperty(ns, 'default', { enumerable: true, value: value });
/******/ 		if(mode & 2 && typeof value != 'string') for(var key in value) __webpack_require__.d(ns, key, function(key) { return value[key]; }.bind(null, key));
/******/ 		return ns;
/******/ 	};
/******/
/******/ 	// getDefaultExport function for compatibility with non-harmony modules
/******/ 	__webpack_require__.n = function(module) {
/******/ 		var getter = module && module.__esModule ?
/******/ 			function getDefault() { return module['default']; } :
/******/ 			function getModuleExports() { return module; };
/******/ 		__webpack_require__.d(getter, 'a', getter);
/******/ 		return getter;
/******/ 	};
/******/
/******/ 	// Object.prototype.hasOwnProperty.call
/******/ 	__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };
/******/
/******/ 	// __webpack_public_path__
/******/ 	__webpack_require__.p = "";
/******/
/******/
/******/ 	// Load entry module and return exports
/******/ 	return __webpack_require__(__webpack_require__.s = "./src/index.ts");
/******/ })
/************************************************************************/
/******/ ({

/***/ "./src/compiler.ts":
/*!*************************!*\
  !*** ./src/compiler.ts ***!
  \*************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

Object.defineProperty(exports, "__esModule", { value: true });
/**
 * HTML模板编译器
 */
function default_1(html, options) {
    var re = /<%([^%>]+)?%>/g;
    var reExp = /(^( )?(if|for|else|switch|case|break|{|}))(.*)?/g;
    var code = 'var r=[];\n';
    var cursor = 0;
    function add(line, js) {
        js ? (code += line.match(reExp) ? line + '\n' : 'r.push(' + line + ');\n')
            : (code += line !== '' ? 'r.push("' + line.replace(/"/g, '\\"') + '");\n' : '');
        return add;
    }
    var match = re.exec(html);
    while (match) {
        add(html.slice(cursor, match.index))(match[1], true);
        cursor = match.index + match[0].length;
        match = re.exec(html);
    }
    add(html.substr(cursor, html.length - cursor));
    code += 'return r.join("");';
    // eslint-disable-next-line no-new-func
    return new Function(code.replace(/[\r\t\n]/g, '')).apply(options);
}
exports.default = default_1;


/***/ }),

/***/ "./src/fs.ts":
/*!*******************!*\
  !*** ./src/fs.ts ***!
  \*******************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
var fs_1 = __importDefault(__webpack_require__(/*! fs */ "fs"));
function exists(path) {
    return new Promise(function (resolve) {
        resolve(fs_1.default.existsSync(path));
    });
}
exports.exists = exists;
function stat(path) {
    return new Promise(function (resolve) {
        resolve(fs_1.default.statSync(path));
    });
}
exports.stat = stat;


/***/ }),

/***/ "./src/index.ts":
/*!**********************!*\
  !*** ./src/index.ts ***!
  \**********************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
/* WEBPACK VAR INJECTION */(function(__dirname) {
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __generator = (this && this.__generator) || function (thisArg, body) {
    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
    return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
    function verb(n) { return function (v) { return step([n, v]); }; }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while (_) try {
            if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [op[0] & 2, t.value];
            switch (op[0]) {
                case 0: case 1: t = op; break;
                case 4: _.label++; return { value: op[1], done: false };
                case 5: _.label++; y = op[1]; op = [0]; continue;
                case 7: op = _.ops.pop(); _.trys.pop(); continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                    if (t[2]) _.ops.pop();
                    _.trys.pop(); continue;
            }
            op = body.call(thisArg, _);
        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
    }
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
var fs_1 = __importDefault(__webpack_require__(/*! fs */ "fs"));
var path_1 = __importDefault(__webpack_require__(/*! path */ "path"));
var url_1 = __webpack_require__(/*! url */ "url");
var http_1 = __importDefault(__webpack_require__(/*! http */ "http"));
var mime_types_1 = __webpack_require__(/*! ./mime-types */ "./src/mime-types.ts");
var fs_2 = __webpack_require__(/*! ./fs */ "./src/fs.ts");
var compiler_1 = __importDefault(__webpack_require__(/*! ./compiler */ "./src/compiler.ts"));
var PORT = 2020;
var HOST = '0.0.0.0';
var CHARSET = 'UTF-8';
function handleDirs(req, res, absPathname) {
    console.log(compiler_1.default);
}
function handleFiles(req, res, absPathname) {
    var ext = path_1.default.extname(absPathname).slice(1) || 'unknow';
    var contentType = mime_types_1.getMime(ext) + ";charset=" + CHARSET;
    var stream = fs_1.default.createReadStream(absPathname);
    res.writeHead(200, { 'Content-Type': contentType });
    stream.on('error', function () {
        res.writeHead(500, { 'Content-Type': mime_types_1.getMime('html') + ";charset=" + CHARSET });
        res.end('<h1>500 Server Error</h1>');
    });
    stream.pipe(res);
}
function handleStatic(req, res) {
    return __awaiter(this, void 0, void 0, function () {
        var href, url, pathname, absPathname;
        return __generator(this, function (_a) {
            switch (_a.label) {
                case 0:
                    href = "http://" + req.headers.host + req.url + ":" + PORT;
                    url = new url_1.URL(href);
                    pathname = decodeURIComponent(url.pathname.replace(/\.\.\//g, ''));
                    absPathname = path_1.default.join(__dirname, pathname);
                    return [4 /*yield*/, fs_2.exists(absPathname)];
                case 1:
                    if (!_a.sent()) return [3 /*break*/, 6];
                    return [4 /*yield*/, fs_2.stat(absPathname)];
                case 2:
                    if (!(_a.sent()).isDirectory()) return [3 /*break*/, 3];
                    handleDirs(req, res, absPathname);
                    return [3 /*break*/, 5];
                case 3: return [4 /*yield*/, fs_2.stat(absPathname)];
                case 4:
                    if ((_a.sent()).isFile()) {
                        handleFiles(req, res, absPathname);
                    }
                    _a.label = 5;
                case 5: return [3 /*break*/, 7];
                case 6:
                    res.writeHead(404, { 'Content-Type': mime_types_1.getMime('html') + ";charset=" + CHARSET });
                    res.end('<h1>404 Not Found</h1>');
                    _a.label = 7;
                case 7: return [2 /*return*/];
            }
        });
    });
}
function requestListener(req, res) {
    var href = decodeURIComponent("http://" + req.headers.host + req.url + ":" + PORT);
    console.log(req.method, href);
    handleStatic(req, res);
}
http_1.default.createServer(requestListener).listen(PORT, HOST, function () {
    console.clear();
    console.log("\n> Listening at http://" + HOST + ":" + PORT + "/\n");
});

/* WEBPACK VAR INJECTION */}.call(this, "/"))

/***/ }),

/***/ "./src/mime-types.ts":
/*!***************************!*\
  !*** ./src/mime-types.ts ***!
  \***************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

Object.defineProperty(exports, "__esModule", { value: true });
function getMime(ext) {
    var mime = {
        html: 'text/html',
        css: 'text/css',
        js: 'text/javascript',
        ico: 'image/x-icon',
        gif: 'image/gif',
        jpeg: 'image/jpeg',
        jpg: 'image/jpeg',
        json: 'application/json',
        pdf: 'application/pdf',
        png: 'image/png',
        svg: 'image/svg+xml',
        tiff: 'image/tiff',
        txt: 'text/plain',
        xml: 'text/xml'
    };
    return mime[ext] || 'application/octet-stream';
}
exports.getMime = getMime;
;


/***/ }),

/***/ "fs":
/*!*********************!*\
  !*** external "fs" ***!
  \*********************/
/*! no static exports found */
/***/ (function(module, exports) {

module.exports = require("fs");

/***/ }),

/***/ "http":
/*!***********************!*\
  !*** external "http" ***!
  \***********************/
/*! no static exports found */
/***/ (function(module, exports) {

module.exports = require("http");

/***/ }),

/***/ "path":
/*!***********************!*\
  !*** external "path" ***!
  \***********************/
/*! no static exports found */
/***/ (function(module, exports) {

module.exports = require("path");

/***/ }),

/***/ "url":
/*!**********************!*\
  !*** external "url" ***!
  \**********************/
/*! no static exports found */
/***/ (function(module, exports) {

module.exports = require("url");

/***/ })

/******/ });
//# sourceMappingURL=data:application/json;charset=utf-8;base64,